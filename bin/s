#!/usr/bin/env ruby

require 'rubygems'
require 'sinatra'
require 'rack-flash'

set :static, true
set :root, Dir.pwd
set :public, Dir.pwd

enable :sessions

use Rack::Flash

module ServerManager
  
  def self.running
    @@running ||= []
  end
  
  # Launch an app at a certain path_array or path_string
  def self.launch!(path_array)
    server = Server.new(path_array)
    server.launch!
    self.running << server
    return server
  end
  
  # Increment the port counter by one... starting at 67800
  # Had to define initial value here because of reloading in development
  def self.next_port!
    @@next_port = (@@next_port || 67800) + 1
  end
  
  # Is this a ruby file?
  def self.ruby_file?(file)
    file =~ /\.rb$/
  end
  
  # Locate an already running server
  def self.already_running(file)
    (self.running.select do |server|
      server.file == file
    end).first
  end
  
  # The class that manages a server instance
  class Server
    attr :port, true
    attr :file, true
    
    def initialize(path_array = nil)
      if path_array.is_a? Array
        self.file = '/' + path_array.join('/')
      else
        self.file = path_array
      end
      
      # Auto assigning the port from the ServerManager
      self.port = ServerManager.next_port!
    end
    
    # Launch myself
    def launch!
      puts file
      Thread.new do 
        `ruby #{file} -p #{port}`
      end
    end
    
    # What is my url?
    def url
      "http://localhost:#{self.port}"
    end
  end
end

def route(path)
  if prefix = ARGV.first
    '/' + prefix + path
  else
    path
  end
end

helpers do
  # Forward link
  def forward_link(path, opts={})
    if File.directory?(path)
      "/browse?" + build_query(:path => path)
    else
      "file://#{path}"
    end
  end

  # Back link
  def back_link(path)
    forward_link(path.split("/")[0..-2].join("/"))
  end
end

get '/' do
  redirect "/browse"
end

get '/browse' do
  @pwd = params[:path] || Dir.pwd
  @files = Dir[@pwd + '/*']
  erb :index
end

get '/run/*' do
  flash[:new_server] = ServerManager.launch!(params[:splat])
  redirect request.referrer
end

__END__

@@ layout
<html>
<head>
  <title>Viewing <%= params[:path] || Dir.pwd %>/</title>
  <style type="text/css" media="screen">
    body {
      font-family: Helvetica;
      padding: 0 1em;
    }

    a {
      text-decoration: none;
      font-family: Bitstream Vera Sans Mono;
      background: #eef;
      padding: 3px;
      color: #000;
    }

    a.run-app {
      background: #ffc;
    }

    a:hover {
      background: #555;
      color: #fff;
    }

    a:active {
      background: #333;
    }

    strong {
      background: #cfa;
      padding: 3px;
    }

    strong a {
      background: #cfa;
      color: #484;
    }

    code {
      font-family: Bitstream Vera Sans Mono;
      background: #eef;
      padding: 3px;
    }
  </style>
</head>
<body>
  <% if flash.has?(:new_server) %>
    <strong>
      Running on port <a href='<%= flash[:new_server].url %>'><%= flash[:new_server].port %></a>.
    </strong>
  <% end %>
  <%= yield %>
</body>
</html>

@@ index
<h1>
  Viewing <code><%= params[:path] || Dir.pwd %>/</code>
</h1>

<% if params[:path] %>
  <h3>
    <a href="<%= back_link(params[:path]) %>">/..</a>
  </h3>
<% end %>

<% @files.each do |file| %>
  <h3>
    <a href ="<%= forward_link(file) %>"><%= "/" if File.directory?(file) %><%= file.split("/").last %></a>
    <% if ServerManager.ruby_file?(file) %>
      <% if (server = ServerManager.already_running(file)) %>
        <small>
          <a href="<%= server.url %>">Go To</a>
        </small>
      <% else %>
        <small>
          <a class="run-app" href="/run<%= file %>">Run app</a>
        </small>
      <% end %>
    <% end %>
  </h3>
<% end %>

<% if params[:path] %>
  <a href="<%= back_link(params[:path]) %>">Back</a>
<% end %>
